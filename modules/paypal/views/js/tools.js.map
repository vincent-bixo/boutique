{"version":3,"file":"js/tools.js","mappings":"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","sources":["webpack://paypal/./node_modules/intl-tel-input/build/js/intlTelInput.js","webpack://paypal/./node_modules/intl-tel-input/index.js","webpack://paypal/webpack/bootstrap","webpack://paypal/webpack/runtime/compat get default export","webpack://paypal/webpack/runtime/define property getters","webpack://paypal/webpack/runtime/hasOwnProperty shorthand","webpack://paypal/./_dev/js/tools.js"],"sourcesContent":["/*\n * International Telephone Input v17.0.16\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"North Macedonia (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-expanded\": \"false\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"17.0.16\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});","/**\n * Exposing intl-tel-input as a component\n */\nmodule.exports = require(\"./build/js/intlTelInput\");\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * 2007-2023 PayPal\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License (AFL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/afl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n *  versions in the future. If you wish to customize PrestaShop for your\n *  needs please refer to http://www.prestashop.com for more information.\n *\n *  @author 2007-2023 PayPal\n *  @author 202 ecommerce <tech@202-ecommerce.com>\n *  @license http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n *  @copyright PayPal\n *\n */\nimport intlTelInput from 'intl-tel-input';\n\nexport const Tools = {\n  // Show error message\n  getAlert(message, typeAlert) {\n    const alert = document.createElement('div');\n    let messageNode = document.createElement('div');\n    messageNode.innerHTML = message;\n    alert.className = `alert alert-${typeAlert}`;\n    alert.appendChild(messageNode);\n    return alert;\n  },\n\n  hideConfiguration(name) {\n    let selector = `[name=\"${name}\"]`;\n    let configuration = $(selector);\n    let formGroup = configuration.closest('.form-group');\n\n    formGroup.hide();\n  },\n\n  showConfiguration(name) {\n    let selector = `[name=\"${name}\"]`;\n    let configuration = $(selector);\n    let formGroup = configuration.closest('.form-group');\n\n    formGroup.show();\n  },\n\n  isVisible(el) {\n    const style = window.getComputedStyle(el);\n    return  style.width !== \"0\" &&\n      style.height !== \"0\" &&\n      style.opacity !== \"0\" &&\n      style.display!=='none' &&\n      style.visibility!== 'hidden';\n  },\n\n  disableTillConsenting(disabledElement, checkBox) {\n    if (disabledElement instanceof Element == false) {\n      return;\n    }\n\n    if (checkBox instanceof Element == false) {\n      return;\n    }\n\n    Tools.disable(disabledElement);\n\n    checkBox.addEventListener('click', function() {\n      if (checkBox.checked) {\n        Tools.enable(disabledElement);\n      } else {\n        Tools.disable(disabledElement);\n      }\n    });\n\n    $('.payment-option').click(function() {\n      if (checkBox.checked) {\n        Tools.enable(disabledElement);\n      } else {\n        Tools.disable(disabledElement);\n      }\n    });\n  },\n\n  disable(element) {\n    if (element instanceof Element == false) {\n      return;\n    }\n\n    element.style.pointerEvents = 'none';\n    element.style.opacity = '0.5';\n  },\n\n  enable(element) {\n    if (element instanceof Element == false) {\n      return;\n    }\n\n    element.style.pointerEvents = '';\n    element.style.opacity = '1';\n  },\n\n  hideElementTillPaymentOptionChecked(checkElementSelector, hideElementSelector) {\n    const checkElement = document.querySelector(checkElementSelector);\n    const hideElement = document.querySelector(hideElementSelector);\n\n    if (checkElement instanceof Element == false) {\n      return;\n    }\n\n    if (hideElement instanceof Element == false) {\n      return;\n    }\n\n    if ('paypalToolsHiddenElemenList' in window == false) {\n      window.paypalToolsHiddenElemenList = {};\n    }\n\n    if (hideElementSelector in window.paypalToolsHiddenElemenList) {\n      window.paypalToolsHiddenElemenList[hideElementSelector].push(checkElement);\n      return;\n    }\n\n    window.paypalToolsHiddenElemenList[hideElementSelector] = [checkElement];\n    const options = checkElement.closest('.payment-options');\n\n    if (options instanceof Element == false) {\n      return;\n    }\n\n    options.addEventListener('input', function(event) {\n      let isHide = false;\n      window.paypalToolsHiddenElemenList[hideElementSelector].forEach(function(elem) {\n        if (elem.checked) {\n          isHide = true;\n        }\n      });\n\n      if (isHide) {\n        hideElement.style.visibility = 'hidden';\n      } else {\n        hideElement.style.visibility = 'initial';\n      }\n    })\n  },\n\n  showElementIfPaymentOptionChecked(checkElementSelector, showElementSelector) {\n    const checkElement = document.querySelector(checkElementSelector);\n    const showElement = document.querySelector(showElementSelector);\n\n    if (checkElement instanceof Element == false) {\n      return;\n    }\n\n    if (showElement instanceof Element == false) {\n      return;\n    }\n\n    if ('paypalToolsShowElemenList' in window == false) {\n      window.paypalToolsShowElemenList = {};\n    }\n\n    if (showElementSelector in window.paypalToolsShowElemenList) {\n      window.paypalToolsShowElemenList[showElementSelector].push(checkElement);\n      return;\n    }\n\n    window.paypalToolsShowElemenList[showElementSelector] = [checkElement];\n    const options = checkElement.closest('.payment-options');\n\n    if (options instanceof Element == false) {\n      return;\n    }\n\n    options.addEventListener('input', function(event) {\n      let isShow = false;\n      window.paypalToolsShowElemenList[showElementSelector].forEach(function(elem) {\n        if (elem.checked) {\n          isShow = true;\n        }\n      });\n\n      if (isShow) {\n        showElement.style.display = 'block';\n      } else {\n        showElement.style.display = 'none';\n      }\n    });\n  },\n\n  initPhoneInput(input, options = {}) {\n    if (false == input instanceof Element) {\n      return false;\n    }\n\n    input.addEventListener('input', function(e) {\n      e.target.value = e.target.value.replace('+', '')\n    });\n\n    return intlTelInput(input, options);\n  },\n};\n\nwindow.PaypalTools = Tools;\nlet event = new Event('paypal-tools-loaded');\ndocument.dispatchEvent(event);\n"],"names":["factory","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","intlTelInputGlobals","getInstance","input","id","getAttribute","window","instances","documentReady","document","readyState","defaults","allowDropdown","autoHideDialCode","autoPlaceholder","customContainer","customPlaceholder","dropdownContainer","excludeCountries","formatOnDisplay","geoIpLookup","hiddenInput","initialCountry","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","utilsScript","regionlessNanpNumbers","forEachProp","obj","callback","keys","forEachInstance","method","Iti","options","_this","this","instance","Constructor","TypeError","_classCallCheck","telInput","activeItem","highlightedItem","customOptions","value","hasOwnProperty","hadInitialPlaceholder","Boolean","protoProps","staticProps","_this2","isMobile","test","navigator","userAgent","body","classList","add","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","countries","sort","_countryNameSort","countryCode","countryCodeMaxLen","countryCodes","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","localeCompare","dialCodes","_addCountryCode","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","attrs","container","el","createElement","setAttribute","appendChild","hasAttribute","form","parentClass","wrapper","_createEl","parentNode","insertBefore","flagsContainer","selectedFlag","role","concat","selectedFlagInner","selectedDialCode","dropdownArrow","countryList","_appendListItems","dropdown","hiddenInputName","lastIndexOf","type","className","preferred","tmp","idSuffix","insertAdjacentHTML","attributeValue","inputValue","val","charAt","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options","_updateFlagFromNumber","_setFlag","defaultCountry","_updateValFromNumber","_initKeyListeners","_initBlurListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","getNumber","addEventListener","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_getClosestLabel","_handleClickSelectedFlag","disabled","readOnly","_showDropdown","_handleFlagsContainerKeydown","stopPropagation","_closeDropdown","_this5","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","number","max","_this7","_handleSubmitOrBlurEvent","_removeEmptyDialCode","numeric","_getNumeric","s","replace","createEvent","initEvent","dispatchEvent","remove","_setDropdownPosition","_highlightListItem","_scrollTo","_bindDropdownListeners","_trigger","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","_toggleClass","extraTop","style","left","scrollLeft","_handleWindowScroll","_this9","_handleMouseoverCountryList","listItem","_getClosestListItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","next","previousElementSibling","nextElementSibling","_startsWith","querySelector","originalNumber","useNational","_intlTelInputUtils$nu","numberFormat","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","isNanp","alreadySelected","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","Error","prevCountry","title","innerHTML","selectedFlagWidth","offsetWidth","_getHiddenSelectedFlagWidth","paddingLeft","_updatePlaceholder","nextItem","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","width","removeChild","shouldSetPlaceholder","numberType","placeholder","getExampleNumber","flagChanged","_updateDialCode","len","setSelectionRange","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","hasSelectedListItem","newNumber","inputVal","newDialCode","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","trim","numericVal","start","_cap","setCountry","removeAttribute","getExtension","_getFullNumber","getNumberType","getValidationError","isValidNumber","originalCountryCode","prototype","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti","_init","module","exports","intlTelInput","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","o","get","prop","call","Tools","getAlert","message","typeAlert","alert","messageNode","hideConfiguration","selector","$","closest","hide","showConfiguration","show","isVisible","getComputedStyle","height","opacity","display","disableTillConsenting","disabledElement","checkBox","Element","disable","checked","enable","click","pointerEvents","hideElementTillPaymentOptionChecked","checkElementSelector","hideElementSelector","checkElement","hideElement","paypalToolsHiddenElemenList","event","isHide","forEach","elem","showElementIfPaymentOptionChecked","showElementSelector","showElement","paypalToolsShowElemenList","isShow","initPhoneInput","arguments","PaypalTools","Event"],"sourceRoot":""}